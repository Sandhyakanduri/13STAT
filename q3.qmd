---
title: "QUESTION3"
---

## code file for 3rd research question

```{r}
# Set CRAN mirror
options(repos = c(CRAN = "https://cloud.r-project.org"))
```

```{r}
# Load necessary libraries
library(dplyr)
library(caret)
library(ggplot2)
library(plotly)
library(MASS)

# Load your dataset
NYPD <- read.csv("/Users/sandhyakanduri/Desktop/semester 1/ STAT515/final project stat/Cleaned_NYPD_Arrest_Data_With_Standardized_Date.csv")

# Inspect the column names and first few rows to understand the structure
colnames(NYPD)
head(NYPD)
# Check the distribution of offense types
table(NYPD$OFNS_DESC)

# Create a binary target variable for "ASSAULT 3 & RELATED OFFENSES"
NYPD <- NYPD %>%
  mutate(
    OFFENSE_BINARY = ifelse(OFNS_DESC == "ASSAULT 3 & RELATED OFFENSES", 1, 0),
    AGE_GROUP = factor(AGE_GROUP, levels = c("<18", "18-24", "25-34", "35-44", "45-54", "55+")),
    PERP_RACE = factor(PERP_RACE),
    PERP_SEX = factor(PERP_SEX)
  )

# Check the distribution of the binary target variable
table(NYPD$OFFENSE_BINARY)

# Step 1: Split the data into training and test sets
set.seed(42)  # For reproducibility
trainIndex <- createDataPartition(NYPD$OFFENSE_BINARY, p = 0.7, list = FALSE)
train_data <- NYPD[trainIndex, ]
test_data <- NYPD[-trainIndex, ]

# Step 2: Train a logistic regression model
model <- glm(OFFENSE_BINARY ~ AGE_GROUP + PERP_RACE + PERP_SEX, 
             data = train_data, 
             family = "binomial")

# Summary of the logistic regression model
summary(model)


# Step 3: Predict probabilities on the test set
test_data$predictions <- predict(model, newdata = test_data, type = "response")


# Load your dataset
NYPD <- read.csv("/Users/sandhyakanduri/Desktop/semester 1/ STAT515/final project stat/Cleaned_NYPD_Arrest_Data_With_Standardized_Date.csv")

# Load necessary libraries
library(dplyr)
library(ggplot2)
library(sf)
library(ggmap)
library(leaflet)

# Convert to sf object for spatial operations (ensure coordinates are in WGS84)
NYPD_sf <- st_as_sf(NYPD, coords = c("Longitude", "Latitude"), crs = 4326)

# Load necessary libraries
library(ggplot2)
library(dplyr)
library(plotly)

# Example dataset preparation: Group by age, offense type, race, and gender
aggregated_data <- NYPD %>%
  group_by(AGE_GROUP, OFNS_DESC, PERP_RACE, PERP_SEX) %>%
  summarise(Arrest_Count = n(), .groups = "drop")

# Define age groups explicitly
aggregated_data <- aggregated_data %>%
  mutate(
    Age_Group = case_when(
      AGE_GROUP %in% c("<18") ~ "<18",
      AGE_GROUP %in% c("18-24") ~ "18-24",
      AGE_GROUP %in% c("25-34") ~ "25-34",
      AGE_GROUP %in% c("35-44") ~ "35-44",
      AGE_GROUP %in% c("45-54") ~ "45-54",
      TRUE ~ "55+"
    )
  )

# Filter for the top 5 offense types for clarity
top_offenses <- aggregated_data %>%
  group_by(OFNS_DESC) %>%
  summarise(Total_Arrests = sum(Arrest_Count)) %>%
  arrange(desc(Total_Arrests)) %>%
  slice(1:5) %>%
  pull(OFNS_DESC)

filtered_data <- aggregated_data %>%
  filter(OFNS_DESC %in% top_offenses)

# Check unique PERP_RACE categories to ensure color mapping matches
unique(filtered_data$PERP_RACE)

# Static ggplot with corrected color mapping
static_plot <- ggplot(filtered_data, aes(x = Age_Group, y = Arrest_Count, color = PERP_RACE, group = PERP_RACE)) +
  geom_line(size = 1) +
  geom_point(size = 2) +
  facet_grid(PERP_SEX ~ OFNS_DESC, scales = "free_y") +
  labs(
    title = "Rate of Arrests per 1,000 Individuals by Age Group, Race, Gender, and Offense Type",
    x = "Age Group",
    y = "Arrest Count",
    color = "Race/Ethnicity"
  ) +
  scale_color_manual(
    values = c(
      "BLACK" = "green",
      "WHITE" = "red",
      "BLACK HISPANIC" = "yellow",
      "ASIAN / PACIFIC ISLANDER" = "purple",
      "AMERICAN INDIAN/ALASKAN NATIVE" = "blue",
      "WHITE HISPANIC" = "orange",
      "UNKNOWN" = "gray"
    )
  ) +
  theme_minimal(base_size = 14) +
  theme(
    strip.text = element_text(size = 12, face = "bold"),
    axis.text.x = element_text(angle = 45, hjust = 1),
    legend.position = "bottom"
  ) +
  annotate(
    "text",
    x = 3, y = max(filtered_data$Arrest_Count, na.rm = TRUE),
    label = "Peak Arrest Rate",
    color = "orange",
    size = 4,
    fontface = "bold"
  )

# Convert ggplot to Plotly for interactivity
interactive_plot <- ggplotly(static_plot)

# Display the interactive Plotly visualization
interactive_plot
```
